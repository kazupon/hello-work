#!/usr/bin/env node

//
// import(s)
//

var fs = require('fs');
var path = require('path');


// help message
var help = [
  "usage: hellowork [options]",
  "",
  "options:",
  "  -p, --port [port]       Port number (default port 20000)",
  "  -v, --verbose           Enable verbose output",
  // TODO: should be silent mode.
  //"  -s, --silent            Don't output",
  "  -l, --log               Enable output to log file",
  "  --version               Show version",
  "  -h, --help              You're staring at it"
].join('\n');


// parse command line
function parseOptions (argv, cb) {
  var options = {
    port: 20000,
    verbose: false,
    silent: false,
    log: false
  };

  try {
    var err;
    var arg;
    var args = argv.slice(2);

    while (args.length) {
      var arg = args.shift();
      switch (arg) {
        case '-p':
        case '--port':
          if (args.length && (arg = args.shift()) && !isNaN(arg)) {
            options.port = parseInt(arg, 10);
          }
          break;
        case '-l':
        case '--log':
          options.log = true;
          break;
        case '-s':
        case '--silent':
          // TODO: should be silent mode.
          //options.slient = true;
          break;
        case '-v':
        case '--verbose':
          options.verbose = true; 
          break;
        case '-h':
        case '--help':
          err = 1;
          break;
        case '--version':
          var version = JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json'))).version
          console.log('hellowork %s', version);
          err = 64;
          break;
        default:
          err = 1;
          break;
      }
    }

    err ? cb(err) : cb(null, options);
  } catch (e) {
    console.error('occured error : %s', e.message);
    err = 1;
    cb(err);
  }
}

// logger specific settings
function configLogger (logger, flags, cb) {
  var err;
  var appenders = [];

  try {
    // initialize
    logger.configure(); 

    if (!flags.log) {
      appenders.push({
        type: 'console',
        layout: {
          type: 'colouredLayout'
        }
      });
    }

    if (flags.log) {
      var log_dir_path = path.join(__dirname, '../log');
      var log_file_path = path.join(__dirname, '../log/hellowork.log');
      if (!path.existsSync(log_dir_path)) {
        if (fs.mkdirSync(log_dir_path, 0777)) {
          cb({ message: 'Faild log directory error' });
          return;
        }
      }
      appenders.push({
        type: 'file',
        filename: log_file_path,
        maxLogSize: 1024 * 1024 * 5,
        backups: 3
      });
    }

    if (!logger.configure({ appenders: appenders, })) {
      cb({ message: 'Faild logger configuration' });
      return;
    }

    var level = 'INFO';
    if (flags.silent) {
      level = 'OFF';
    } else if (flags.verbose) {
      level = 'DEBUG';
    }
    if (!logger.setLevel(level)) {
      cb({ message: 'Faild logger set level' });
      return;
    }

    cb();
  } catch (e) {
    console.error(e.message);
    err = 1;
    cb(err);
  }
}


//
// main
//

if (require.main === module) {

  parseOptions(process.argv, function (err, options) {
    if (err) {
      err !== 64 && console.log(help);
      process.exit(err);
      return;
    }

    var logger = require('../lib/logger');

    configLogger(logger, {
      verbose: options.verbose,
      silent: options.silent,
      log: options.log
    }, function (err) {
      if (err) {
        console.log(err.message);
        process.exit(1);
        return;
      }

      var assert = require('../lib/util').assert;
      var Agent = require('../lib/agent').Agent;

      var agent = new Agent();
      Object.defineProperty(agent, 'DEBUG', {
        value: options.debug,
      });

      agent.start(options.port, function () {
        logger.info('hellowork server listening on port %d ...', options.port); 
      });

      agent.on('error', function (err) {
        logger.error('occred error : %s (%d)', err.message, err.code);
        logger.debug('stack : %j', err.stack); 
      });

      agent.on('stop', function () {
        logger.info('... stop hellowork server');
      });

      process.stdin.resume();

      var abort = function () {
        agent.stop();
        process.exit(1);
      }

      var abort_events = ['SIGINT', 'SIGQUIT', 'SIGTERM'];
      abort_events.forEach(function (event) {
          process.on(event, abort.bind(null));
      });

      process.on('uncaughtException', function (err) {
        logger.fatal('Occured `uncaughtException` : %s \n %s', err.message, err.stack);
        logger.fatal('Please report this bug.');
        abort();
      });

    }); // end of configLogger

  }); // end of parseOptions
}

