#!/usr/bin/env node

//
// import(s)
//
var fs = require('fs');
var path = require('path');
var assert = require('../lib/util').assert;
var Agent = require('../lib/agent').Agent;
var logger = require('../lib/logger');


// parse command line
function parseOptions (args, callback) {
  var options = {
    port: 20000,
    debug: true,
    log: '',
  };

  try {
    if (process.env.NODE_ENV === 'production') {
      options['debug'] = false;
    }

    while (args.length) {
      var arg = args.shift();
      switch (arg) {
        case '-p':
        case '--port':
          if (arg = args.shift()) {
            options['port'] = parseInt(arg, 10);
          }
          break;
        case '--log':
          if (arg = args.shift()) {
            options['log'] = arg;
          }
          break;
        default:
          break;
      }
    }

    callback(null, options);
  } catch (e) {
    callback(e);
  }
}


// logger specific settings
function configureLogger (options, callback) {
  var appenders = [];
  if (options.debug) {
    appenders.push({
      type: 'console',
      layout: {
        type: 'colouredLayout'
      }
    });
  }

  try {
    var ret;
    if (options.log !== '') {
      if (!path.existsSync(options.log)) {
        var logger_dir = path.dirname(options.log);
        if (!path.existsSync(logger_dir)) {
          ret = fs.mkdirSync(logger_dir, 0777);
          if (ret) {
            callback({
              message: 'Faild log directory error',
              code: ret,
            });
            return;
          }
        }
      }
      appenders.push({
        type: 'file',
        filename: options.log,
        maxLogSize: 1024 * 1024 * 5,
        backups: 3
      });
    }

    if (appenders.length > 0) {
      if (!logger.configure({ appenders: appenders, }) || 
          !logger.setLevel((options.debug ? 'DEBUG' : 'INFO'))) {
        callback({
          message: 'Faild logger settings',
        });
        return;
      }
    }
    callback();

  } catch (e) {
    console.error(e.message);
    callback(e);
  }
}


//
// main
//

parseOptions(process.argv.slice(2), function (err, options) {
  if (err) {
    process.exit(1);
    return;
  }
  assert(options);

  configureLogger(options, function (err) {
    if (err) {
      process.exit(1);
      return;
    }

    var agent = new Agent();
    Object.defineProperty(agent, 'DEBUG', {
      value: options.debug,
    });

    agent.start(options.port, function () {
      logger.info('hellowork server listening on port %d ...', options.port); 
    });

    agent.on('error', function (err) {
      logger.error('occred error : %s (%d)', err.message, err.code);
      logger.debug('stack : %j', err.stack); 
    });

    agent.on('stop', function () {
      logger.info('... stop hellowork server');
    });

    process.stdin.resume();

    var abort = function () {
      agent.stop();
      process.exit(1);
    }

    process.on('SIGINT', function () {
      abort();
    });
    process.on('SIGQUIT', function () {
      abort();
    });
    process.on('SIGTERM', function () {
      abort();
    });

    process.on('uncaughtException', function (err) {
      logger.fatal('Occured `uncaughtException` : %s \n %s', err.message, err.stack);
      logger.fatal('Please report this bug.');
      abort();
    });

  }); // end of configureLogger

}); // end of parseOptions

